{"ast":null,"code":"import baseURL from \"../config\";\n\n//Used in NewPost.js\nconst create = async (params, credentials, post) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/new/\" + params.userId, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      },\n      body: post\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst listByUser = async (params, credentials) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/by/\" + params.userId, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst listNewsFeed = async (params, credentials, signal) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/feed/\" + params.userId, {\n      method: \"GET\",\n      signal: signal,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst remove = async (params, credentials) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/\" + params.userId, {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      }\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst like = async (params, credentials, postId) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/like/\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst unlike = async (params, credentials, postId) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/unlike/\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId: postId\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst comment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/comment\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId,\n        comment\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nconst uncomment = async (params, credentials, postId, comment) => {\n  try {\n    let response = await fetch(baseURL + \"/api/posts/uncomment\", {\n      method: \"PUT\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + credentials.t\n      },\n      body: JSON.stringify({\n        userId: params.userId,\n        postId,\n        comment\n      })\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport { listByUser, listNewsFeed, create, remove, like, unlike, comment, uncomment };","map":{"version":3,"names":["baseURL","create","params","credentials","post","response","fetch","userId","method","headers","Accept","Authorization","t","body","json","err","console","log","listByUser","listNewsFeed","signal","remove","like","postId","JSON","stringify","unlike","comment","uncomment"],"sources":["D:/social-frontend/src/post/api-post.js"],"sourcesContent":["import baseURL from \"../config\";\r\n\r\n//Used in NewPost.js\r\nconst create = async (params, credentials, post) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/new/\" + params.userId, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n      body: post,\r\n    });\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst listByUser = async (params, credentials) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/by/\" + params.userId, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n    });\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst listNewsFeed = async (params, credentials, signal) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/feed/\" + params.userId, {\r\n      method: \"GET\",\r\n      signal: signal,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n    });\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst remove = async (params, credentials) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/\" + params.userId, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n    });\r\n\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst like = async (params, credentials, postId) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/like/\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n      body: JSON.stringify({ userId: params.userId, postId: postId }),\r\n    });\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst unlike = async (params, credentials, postId) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/unlike/\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n      body: JSON.stringify({ userId: params.userId, postId: postId }),\r\n    });\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst comment = async (params, credentials, postId, comment) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/comment\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n\r\n      body: JSON.stringify({ userId: params.userId, postId, comment }),\r\n    });\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst uncomment = async (params, credentials, postId, comment) => {\r\n  try {\r\n    let response = await fetch(baseURL + \"/api/posts/uncomment\", {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + credentials.t,\r\n      },\r\n\r\n      body: JSON.stringify({ userId: params.userId, postId, comment }),\r\n    });\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport {\r\n  listByUser,\r\n  listNewsFeed,\r\n  create,\r\n  remove,\r\n  like,\r\n  unlike,\r\n  comment,\r\n  uncomment,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}